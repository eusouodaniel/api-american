<?php

namespace AppBundle\Repository;

/**
 * PaymentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PaymentRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * Adiciona filtros para selecionar apenas registros ativos à query.
     * @param QueryBuilder $qb Query inicial.
     * @return QueryBuilder Query com filtros.
     */
    public function addActiveQuery(QueryBuilder $qb = null) {
        $em = $this->getEntityManager();

        if (is_null($qb)) {
            $qb = $em->createQueryBuilder();
        }

        $qb->select(array('p'))
            ->from('AppBundle:Payment', 'p');

        return $qb;
    }

    public function findPaymentsByCourse($course){
      $qb = $this->addActiveQuery();

      $qb->join("p.inscription", "i")
        ->andWhere("i.course = :course")
        ->setParameter('course', $course->getId())
        ->orderBy("p.dtCreation");

      $query = $qb->getQuery();

      return $query->getResult();

    }

    public function findPaymentsByEbook($ebook){
      $qb = $this->addActiveQuery();

      $qb->join("p.inscription", "i")
        ->andWhere("i.ebook = :ebook")
        ->setParameter('ebook', $ebook->getId())
        ->orderBy("p.dtCreation");

      $query = $qb->getQuery();

      return $query->getResult();

    }

    /**
     * Retorna o total de pagamentos do curso de acordo com os parâmetros informados.
     * @param Course $course
     * @param Ebook $ebook
     * @param PaymentStatus $status Status do pagamento a ser buscado
     * @return array Array de registros
     */
    public function getSumPayments($course = null, $ebook = null, $status = null)
    {
        $qb = $this->addActiveQuery();

        $qb->select('sum(p.value) as total');

        $qb->join("p.inscription", "i");

        if($course!=null){
          $qb->andWhere("i.course = :course")
          ->setParameter('course', $course->getId());
        }

        if($ebook!=null){
          $qb->andWhere("i.ebook = :ebook")
          ->setParameter('ebook', $ebook->getId());
        }

        if($status!=null){
          $qb->andWhere('p.payment_status = :status')
             ->setParameter('status', $status->getId());
        }

        $qb->orderBy("p.dtCreation");

        $query = $qb->getQuery();

        return $query->getSingleScalarResult();
    }

    /**
    * Busca todos os pagamentos para o relatório de acordo com o filtro
    * @param SearchReport $searchReport Entidade de busca para o report.
    * @return array Array de registros.
    */
    public function findForReport($searchReport){
      $qb = $this->addActiveQuery();

      $qb->join("p.inscription", "i");

      if($searchReport->getBeginDate()!=null){
        $qb->andWhere('p.dtCreation >= :dt_creation')
        ->setParameter('dt_creation', $searchReport->getBeginDate()->setTime(00, 00, 00));
      }

      if($searchReport->getEndDate()!=null){
        $qb->andWhere('p.dtCreation <= :dt_creation2')
        ->setParameter('dt_creation2', $searchReport->getEndDate()->setTime(23, 59, 59));
      }

      if($searchReport->getCourse()!=null){
        $qb->andWhere('i.course = :course')
        ->setParameter('course', $searchReport->getCourse());
      }

      if($searchReport->getPaymentStatus()!=null){
        $qb->andWhere('p.payment_status = :payment_status')
        ->setParameter('payment_status', $searchReport->getPaymentStatus());
      }

      $query = $qb->getQuery();

      return $query->getResult();
    }
}
