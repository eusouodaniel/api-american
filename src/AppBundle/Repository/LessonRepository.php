<?php

namespace AppBundle\Repository;

/**
 * LessonRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LessonRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * Adiciona filtros para selecionar apenas registros ativos à query.
     * @param QueryBuilder $qb Query inicial.
     * @return QueryBuilder Query com filtros.
     */
    public function addActiveQuery(QueryBuilder $qb = null) {
        $em = $this->getEntityManager();

        if (is_null($qb)) {
            $qb = $em->createQueryBuilder();
        }

        $qb->select(array('l'))
            ->from('AppBundle:Lesson', 'l');

        return $qb;
    }

    /**
     * Retorna a maior posição de  saldo da bonificação
     * @param Course $course
     * @return array Array de registros
     */
    public function getMaxLessonPositionByCourse($course)
    {
        $qb = $this->addActiveQuery();

        $qb->select('max(l.position) as position');

        $qb->andWhere('l.course = :course')
           ->setParameter('course', $course->getId());

        $query = $qb->getQuery();

        return $query->getSingleScalarResult();
    }

    /**
     * Encontra a primeira aula do curso
     * @param  Course $course
     */
    public function findFirstByCourse($course) {
        $qb = $this->addActiveQuery();
        $qb->andWhere('l.course = :course')->setParameter('course', $course);
        $qb->orderBy('l.course', 'ASC')->setMaxResults(1);
        $query = $qb->getQuery();
        return $query->getOneOrNullResult();
    }

    /**
     * Retorna a próxima aula
     * @param Lesson $module
     */
    public function getNextLesson($lesson) {
        $qb = $this->addActiveQuery();
        $qb->andWhere('l.course = :course')->setParameter('course', $lesson->getCourse()->getId());
        $qb->andWhere('l.position > :position')->setParameter('position', $lesson->getPosition());
        $qb->orderBy('l.position', 'ASC')->setMaxResults(1);
        return $qb->getQuery()->getOneOrNullResult();
    }

    public function checkEndModule($lessonId, $courseId) {
        $qb = $this->addActiveQuery();
        $qb->join('l.module', 'm')
            ->join('m.course', 'c')
            ->join('m.lessons', 'ls')
            ->join('ls.inscriptionlessons', 'il')
            ->where('l.id = :lesson')
            ->setParameter('lesson', $lessonId)
            ->andWhere('c.id = :course')
            ->setParameter('course', $courseId)
            ->andWhere('il.finished is null');
        $query = $qb->getQuery();

        return $query->getResult();
    }
}
