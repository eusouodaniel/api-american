<?php

namespace AppBundle\Repository;

use AppBundle\Entity\InscriptionStatus;
use AppBundle\Entity\Course;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * InscriptionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InscriptionRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * Adiciona filtros para selecionar apenas registros ativos à query.
     * @param QueryBuilder $qb Query inicial.
     * @return QueryBuilder Query com filtros.
     */
    public function addActiveQuery(QueryBuilder $qb = null) {
        $em = $this->getEntityManager();

        if (is_null($qb)) {
            $qb = $em->createQueryBuilder();
        }

        $qb->select(array('i'))
            ->from('AppBundle:Inscription', 'i');

        return $qb;
    }

    /**
    * Busca todas as matriculas a partir dos dados informados
    * @param User $user Usuário corrente.
    * @param Course $course Curso a ser pesquisado.
    * @param InscriptionStatus $inscriptionstatus Status da matrícula.
    * @return array Array de registros.
    */
    public function findInscriptionByUser($user, $course = null, $inscriptionstatus = null){
      $qb = $this->addActiveQuery();

      $qb->andWhere("i.user = :user")->setParameter("user", $user);

      if($course!=null){
        $qb->andWhere("i.course = :course")->setParameter("course", $course);
      }

      if($inscriptionstatus!=null){
        $qb->andWhere("i.inscription_status = :inscription_status")->setParameter("inscription_status", $inscriptionstatus);
      }

      $query = $qb->getQuery();

      return $query->getResult();
    }

    /**
    * Busca todas as matriculas a partir dos dados informados
    * @param User $user Usuário corrente.
    * @param Course $course Curso a ser pesquisado.
    * @param InscriptionStatus $inscriptionstatus Status da matrícula.
    * @return array Array de registros.
    */
    public function getLastInscriptionByUser($user, $course = null, $ebook = null){
      $qb = $this->addActiveQuery();

      $qb->andWhere("i.user = :user")->setParameter("user", $user);

      if($course!=null){
        $qb->andWhere("i.course = :course")->setParameter("course", $course);
      }

      if($ebook!=null){
        $qb->andWhere("i.ebook = :ebook")->setParameter("ebook", $ebook);
      }

      $qb->orderBy("i.id", "DESC")->setMaxResults(1);

      return $qb->getQuery()->getOneOrNullResult();
    }

    /**
    * Verifica se o usuário possui uma matricula ativa no curso
    * @param User $user Usuário a ser pesquisado.
    * @param Course $course Curso a ser pesquisado.
    * @return boolean
    */
    public function verifyInscription($user, $course){
      $em = $this->getEntityManager();
      $inscriptionStatus = $em->getReference('AppBundle:InscriptionStatus', InscriptionStatus::APROVADO);
      $inscriptions = $this->findInscriptionByUser($user, $course, $inscriptionStatus);
      return count($inscriptions) > 0 ? true : false;
    }

    /**
     * Retorna o total de inscritos no curso de acordo com os parâmetros informados.
     * @param Course $course
     * @param InscriptionStatus $inscriptionStatus
     * @return array Array de registros
     */
    public function getCountInscriptions($course = null, $ebook = null, $status = null)
    {
        $qb = $this->addActiveQuery();

        $qb->select('count(i.id) as total');

        if($course!=null){
          $qb->andWhere('i.course = :course')
             ->setParameter('course', $course->getId());
        }

        if($ebook!=null){
          $qb->andWhere('i.ebook = :ebook')
             ->setParameter('ebook', $ebook->getId());
        }

        if($status!=null){
          $qb->andWhere('i.inscription_status = :status')
             ->setParameter('status', $status->getId());
        }

        $query = $qb->getQuery();

        return $query->getSingleScalarResult();
    }

    /**
    * Busca todas as matriculas para o relatório de acordo com o filtro
    * @param SearchReport $searchReport Entidade de busca para o report.
    * @return array Array de registros.
    */
    public function findForReport($searchReport){
      $qb = $this->addActiveQuery();

      if($searchReport->getBeginDate()!=null){
        $qb->andWhere('i.dtCreation >= :dt_creation')
        ->setParameter('dt_creation', $searchReport->getBeginDate()->setTime(00, 00, 00));
      }

      if($searchReport->getEndDate()!=null){
        $qb->andWhere('i.dtCreation <= :dt_creation2')
        ->setParameter('dt_creation2', $searchReport->getEndDate()->setTime(23, 59, 59));
      }

      if($searchReport->getCourse()!=null){
        $qb->andWhere('i.course = :course')
        ->setParameter('course', $searchReport->getCourse());
      }

      if($searchReport->getInscriptionStatus()!=null){
        $qb->andWhere('i.inscription_status = :inscription_status')
        ->setParameter('inscription_status', $searchReport->getInscriptionStatus());
      }

      $query = $qb->getQuery();

      return $query->getResult();
    }

    /**
     * Busca todos os pedidos a serem finalizados.
     * @return array Pedidos a serem finalizados.
     */
    public function findOpenedInscriptions() {
        $now = new \DateTime("now");

        $rsm = new ResultSetMapping;
        $rsm->addEntityResult('AppBundle:Inscription', 'i');
        $rsm->addFieldResult('i', 'id', 'id');
        $rsm->addJoinedEntityResult('AppBundle:Course', 'c', 'i', 'course');
        $rsm->addFieldResult('c', 'course_id', 'id');
        $rsm->addFieldResult('c', 'course_slug', 'slug');
        $rsm->addFieldResult('c', 'course_name', 'name');
        $rsm->addJoinedEntityResult('AppBundle:Ebook', 'e', 'i', 'ebook');
        $rsm->addFieldResult('e', 'ebook_id', 'id');
        $rsm->addFieldResult('e', 'ebook_slug', 'slug');
        $rsm->addFieldResult('e', 'ebook_name', 'name');
        $rsm->addJoinedEntityResult('UserBundle:User', 'u', 'i', 'user');
        $rsm->addFieldResult('u', 'user_id', 'id');
        $rsm->addFieldResult('u', 'user_email', 'email');

        $query = $this->_em->createNativeQuery('select i.id, i.course_id, i.ebook_id, c.id as course_id, c.slug as course_slug,
c.name as course_name, e.id as ebook_id, e.name as ebook_name, e.slug as ebook_slug, u.id as user_id, u.email as user_email
from inscription i
left outer join course c on i.course_id = c.id
left outer join ebook e on i.ebook_id = e.id
inner join user u on i.user_id = u.id
inner join payment p on p.inscription_id = i.id
where i.inscriptionstatus_id = :inscriptionstatus_waiting
and TIMESTAMPDIFF(MINUTE, i.dt_creation, :now) >= 15
and p.gateway_code is null
order by i.dt_creation', $rsm);
        $query->setParameter('inscriptionstatus_waiting', InscriptionStatus::AGUARDANDO_PAGAMENTO);
        $query->setParameter('now', $now);

        $inscriptions = $query->getResult();

        return $inscriptions;
    }
}
